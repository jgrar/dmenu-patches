diff --git a/config.def.h b/config.def.h
index 1edb647..5faee5c 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,6 +1,8 @@
 /* See LICENSE file for copyright and license details. */
 /* Default settings; can be overriden by command line. */
 
+static const unsigned short alpha = 0xd0; /* background color alpha */
+
 static int topbar = 1;                      /* -b  option; if 0, dmenu appears at bottom     */
 /* -fn option overrides fonts[0]; default X11 font or font set */
 static const char *fonts[] = {
diff --git a/config.mk b/config.mk
index 4d908a5..493c07e 100644
--- a/config.mk
+++ b/config.mk
@@ -20,7 +20,7 @@ FREETYPEINC = /usr/include/freetype2
 
 # includes and libs
 INCS = -I${X11INC} -I${FREETYPEINC}
-LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS}
+LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lXrender
 
 # flags
 CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_XOPEN_SOURCE=700 -D_POSIX_C_SOURCE=200809L -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
diff --git a/dmenu.c b/dmenu.c
index d605ab4..c47468a 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -50,7 +50,11 @@ static Window root, parentwin, win;
 static XIC xic;
 
 static Drw *drw;
-static Clr *scheme[SchemeLast];
+static Scm scheme[SchemeLast];
+
+static unsigned int depth;
+static Visual *visual;
+static Colormap cmap;
 
 #include "config.h"
 
@@ -552,9 +556,9 @@ setup(void)
 #endif
 
 	/* init appearance */
-	scheme[SchemeNorm] = drw_scm_create(drw, colors[SchemeNorm], 2);
-	scheme[SchemeSel] = drw_scm_create(drw, colors[SchemeSel], 2);
-	scheme[SchemeOut] = drw_scm_create(drw, colors[SchemeOut], 2);
+	scheme[SchemeNorm] = drw_scm_create(drw, colors[SchemeNorm], 2, alpha);
+	scheme[SchemeSel] = drw_scm_create(drw, colors[SchemeSel], 2, alpha);
+	scheme[SchemeOut] = drw_scm_create(drw, colors[SchemeOut], 2, alpha);
 
 	clip = XInternAtom(dpy, "CLIPBOARD",   False);
 	utf8 = XInternAtom(dpy, "UTF8_STRING", False);
@@ -608,11 +612,13 @@ setup(void)
 
 	/* create menu window */
 	swa.override_redirect = True;
-	swa.background_pixel = scheme[SchemeNorm][ColBg].pixel;
+	swa.colormap = cmap;
 	swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask;
 	win = XCreateWindow(dpy, parentwin, x, y, mw, mh, 0,
-	                    CopyFromParent, CopyFromParent, CopyFromParent,
-	                    CWOverrideRedirect | CWBackPixel | CWEventMask, &swa);
+		depth, InputOutput, visual,
+		CWOverrideRedirect | CWBackPixel | CWBorderPixel | CWColormap | CWEventMask,
+		&swa
+	);
 
 	/* open input methods */
 	xim = XOpenIM(dpy, NULL, NULL, NULL);
@@ -694,7 +700,48 @@ main(int argc, char *argv[])
 	if (!XGetWindowAttributes(dpy, parentwin, &wa))
 		die("could not get embedding window attributes: 0x%lx",
 		    parentwin);
-	drw = drw_create(dpy, screen, root, wa.width, wa.height);
+	if (alpha < OPAQUE) {
+		XVisualInfo *vis;
+		XRenderPictFormat *fmt;
+		int nvi;
+		int i;
+
+		depth = 32;
+		XVisualInfo tpl = {
+			.screen = screen,
+			.depth = 32,
+			.class = TrueColor
+		};
+
+		long masks = VisualScreenMask | VisualDepthMask | VisualClassMask;
+		vis = XGetVisualInfo(dpy, masks, &tpl, &nvi);
+		visual = NULL;
+		for (i = 0; i < nvi; i++) {
+			fmt = XRenderFindVisualFormat(dpy, vis[i].visual);
+			if (fmt->type == PictTypeDirect && fmt->direct.alphaMask) {
+				visual = vis[i].visual;
+				depth = vis[i].depth;
+				cmap = XCreateColormap(dpy, root, visual, None);
+				break;
+			}
+		}
+
+		XFree(vis);
+		if (!visual)
+			fprintf(stderr, "Couldn't find ARGB visual.\n");
+	}
+
+	if (!depth)
+		depth = DefaultDepth(dpy, screen);
+
+	if (!visual)
+		visual = DefaultVisual(dpy, screen);
+
+	if (!cmap)
+		cmap = DefaultColormap(dpy, screen);
+
+	drw = drw_create(dpy, screen, root, wa.width, wa.height, visual, depth, cmap);
+
 	if (!drw_fontset_create(drw, fonts, LENGTH(fonts)))
 		die("no fonts could be loaded.");
 	lrpad = drw->fonts->h;
diff --git a/dmenu_path b/dmenu_path
old mode 100644
new mode 100755
diff --git a/drw.c b/drw.c
index c1582e7..b31a711 100644
--- a/drw.c
+++ b/drw.c
@@ -61,7 +61,8 @@ utf8decode(const char *c, long *u, size_t clen)
 }
 
 Drw *
-drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h)
+drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h,
+	Visual *visual, unsigned int depth, Colormap cmap)
 {
 	Drw *drw = ecalloc(1, sizeof(Drw));
 
@@ -70,8 +71,11 @@ drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h
 	drw->root = root;
 	drw->w = w;
 	drw->h = h;
-	drw->drawable = XCreatePixmap(dpy, root, w, h, DefaultDepth(dpy, screen));
-	drw->gc = XCreateGC(dpy, root, 0, NULL);
+	drw->visual = visual;
+	drw->depth = depth;
+	drw->cmap = cmap;
+	drw->drawable = XCreatePixmap(dpy, root, w, h, depth);
+	drw->gc = XCreateGC(dpy, drw->drawable, 0, NULL);
 	XSetLineAttributes(dpy, drw->gc, 1, LineSolid, CapButt, JoinMiter);
 
 	return drw;
@@ -87,7 +91,7 @@ drw_resize(Drw *drw, unsigned int w, unsigned int h)
 	drw->h = h;
 	if (drw->drawable)
 		XFreePixmap(drw->dpy, drw->drawable);
-	drw->drawable = XCreatePixmap(drw->dpy, drw->root, w, h, DefaultDepth(drw->dpy, drw->screen));
+	drw->drawable = XCreatePixmap(drw->dpy, drw->root, w, h, drw->depth);
 }
 
 void
@@ -180,31 +184,57 @@ drw_fontset_free(Fnt *font)
 }
 
 void
-drw_clr_create(Drw *drw, Clr *dest, const char *clrname)
+drw_clr_create(Drw *drw, XftColor *dest, const char *clrname,
+	unsigned short alpha)
 {
 	if (!drw || !dest || !clrname)
 		return;
 
-	if (!XftColorAllocName(drw->dpy, DefaultVisual(drw->dpy, drw->screen),
-	                       DefaultColormap(drw->dpy, drw->screen),
-	                       clrname, dest))
+	if (alpha < OPAQUE) {
+		XColor c;
+		XRenderPictFormat *fmt;
+
+		if ((drw->visual->class == TrueColor)
+			&& (fmt = XRenderFindVisualFormat(drw->dpy, drw->visual))) {
+
+			if (!XParseColor(drw->dpy, drw->cmap, clrname, &c))
+				die("error, cannot parse color '%s'", clrname);
+			else {
+				dest->color.red   = c.red   * alpha / 0xffff;
+				dest->color.green = c.green * alpha / 0xffff;
+				dest->color.blue  = c.blue  * alpha / 0xffff;
+				dest->color.alpha = alpha;
+
+				dest->pixel =
+					  ((dest->color.red   * (fmt->direct.redMask   + 1) >> 8) << fmt->direct.red  )
+					| ((dest->color.green * (fmt->direct.greenMask + 1) >> 8) << fmt->direct.green)
+					| ((dest->color.blue  * (fmt->direct.blueMask  + 1) >> 8) << fmt->direct.blue )
+					| ((dest->color.alpha * (fmt->direct.alphaMask + 1) >> 8) << fmt->direct.alpha);
+				return;
+			}
+		}
+	}
+	if (!XftColorAllocName(drw->dpy, drw->visual, drw->cmap, clrname, dest))
 		die("error, cannot allocate color '%s'", clrname);
 }
 
 /* Wrapper to create color schemes. The caller has to call free(3) on the
  * returned color scheme when done using it. */
-Clr *
-drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount)
+Scm
+drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount,
+	unsigned short alpha)
 {
 	size_t i;
-	Clr *ret;
+	Scm ret;
 
 	/* need at least two colors for a scheme */
 	if (!drw || !clrnames || clrcount < 2 || !(ret = ecalloc(clrcount, sizeof(XftColor))))
 		return NULL;
 
 	for (i = 0; i < clrcount; i++)
-		drw_clr_create(drw, &ret[i], clrnames[i]);
+		drw_clr_create(drw, &ret[i], clrnames[i],
+			(i == ColBg)? alpha: OPAQUE);
+
 	return ret;
 }
 
@@ -216,7 +246,7 @@ drw_setfontset(Drw *drw, Fnt *set)
 }
 
 void
-drw_setscheme(Drw *drw, Clr *scm)
+drw_setscheme(Drw *drw, Scm scm)
 {
 	if (drw)
 		drw->scheme = scm;
@@ -260,9 +290,8 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lp
 	} else {
 		XSetForeground(drw->dpy, drw->gc, drw->scheme[invert ? ColFg : ColBg].pixel);
 		XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, w, h);
-		d = XftDrawCreate(drw->dpy, drw->drawable,
-		                  DefaultVisual(drw->dpy, drw->screen),
-		                  DefaultColormap(drw->dpy, drw->screen));
+		d = XftDrawCreate(drw->dpy, drw->drawable, drw->visual,
+			drw->cmap);
 		x += lpad;
 		w -= lpad;
 	}
diff --git a/drw.h b/drw.h
index 4c67419..dd2d1ad 100644
--- a/drw.h
+++ b/drw.h
@@ -12,22 +12,27 @@ typedef struct Fnt {
 	struct Fnt *next;
 } Fnt;
 
+#define OPAQUE 0xff
 enum { ColFg, ColBg }; /* Clr scheme index */
-typedef XftColor Clr;
+typedef XftColor *Scm;
 
 typedef struct {
 	unsigned int w, h;
 	Display *dpy;
 	int screen;
 	Window root;
+	Visual *visual;
+	unsigned int depth;
+	Colormap cmap;
 	Drawable drawable;
 	GC gc;
-	Clr *scheme;
+	Scm scheme;
 	Fnt *fonts;
 } Drw;
 
 /* Drawable abstraction */
-Drw *drw_create(Display *dpy, int screen, Window win, unsigned int w, unsigned int h);
+Drw *drw_create(Display *dpy, int screen, Window win, unsigned int w, unsigned int h,
+	Visual *visual, unsigned int depth, Colormap cmap);
 void drw_resize(Drw *drw, unsigned int w, unsigned int h);
 void drw_free(Drw *drw);
 
@@ -38,8 +43,10 @@ unsigned int drw_fontset_getwidth(Drw *drw, const char *text);
 void drw_font_getexts(Fnt *font, const char *text, unsigned int len, unsigned int *w, unsigned int *h);
 
 /* Colorscheme abstraction */
-void drw_clr_create(Drw *drw, Clr *dest, const char *clrname);
-Clr *drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount);
+void drw_clr_create(Drw *drw, XftColor *dest, const char *clrname,
+	unsigned short alpha);
+Scm drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount,
+	unsigned short alpha);
 
 /* Cursor abstraction */
 Cur *drw_cur_create(Drw *drw, int shape);
@@ -47,7 +54,7 @@ void drw_cur_free(Drw *drw, Cur *cursor);
 
 /* Drawing context manipulation */
 void drw_setfontset(Drw *drw, Fnt *set);
-void drw_setscheme(Drw *drw, Clr *scm);
+void drw_setscheme(Drw *drw, Scm scm);
 
 /* Drawing functions */
 void drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert);
